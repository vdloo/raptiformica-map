---
- hosts: all
  vars:
    ansible_python_interpreter: "/usr/bin/env python2"
  tasks:
  - name: Ensure Debian-like OS dependencies are installed
    apt: name={{ item }} state=latest
    with_items:
    - python3
    - python3-dev
    - python3-pip
    - python3-venv
    - python-virtualenv
    - libmysqlclient-dev
    - graphviz
    - libgraphviz-dev
    - pkg-config
    - screen
    - dnsmasq
    - locate
    - git
    - cmake
    - build-essential
    - checkinstall
    - autoconf
    - pkg-config
    - libtool
    - python-sphinx
    - wget
    - libcunit1-dev
    - nettle-dev
    - libyaml-dev
    - libuv-dev

    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Ensure Archlinux dependencies are installed
    pacman: name={{ item }} state=latest
    with_items:
    - python-pip
    - python
    - python-virtualenv
    - python-sphinx
    - libmysqlclient
    - graphviz
    - pkg-config
    - screen
    - dnsmasq
    - make
    - cmake
    - zlib
    - ruby
    - cunit
    - nettle
    - libuv
    - libyaml
    when: ansible_distribution == 'Archlinux'

  - name: Install the raptiformica-map repository
    git: repo=https://github.com/vdloo/raptiformica-map.git
      dest=/usr/etc/raptiformica_map
      version=master
      force=yes
      update=yes
    register: raptiformica_map_git

  - name: Install raptiformica-map requirements in the virtualenv on Ubuntu
    pip:
      requirements=/usr/etc/raptiformica_map/requirements/base.txt
      virtualenv=/usr/etc/raptiformica_map/venv
      virtualenv_command=pyvenv-3.5
    when: ansible_distribution == 'Ubuntu'

  - name: Install raptiformica-map requirements in the virtualenv
    pip:
      requirements=/usr/etc/raptiformica_map/requirements/base.txt
      virtualenv=/usr/etc/raptiformica_map/venv
      virtualenv_python=python3
    when: ansible_distribution != 'Ubuntu'

  - name: Install pygraphviz for Ubuntu
    shell: >
      PYTHONPATH=/usr/etc/raptiformica_map/
      /usr/etc/raptiformica_map/venv/bin/pip3
      install pygraphviz==1.3.1
      --install-option="--include-path=/usr/include/graphviz"
      --install-option="--library-path=/usr/lib/graphviz/"
      --exists-action=w
    when: ansible_distribution == 'Ubuntu'

  - name: Install pygraphviz for everyone else
    shell: >
      PYTHONPATH=/usr/etc/raptiformica_map/
      /usr/etc/raptiformica_map/venv/bin/pip3
      install pygraphviz==1.3.1
      --exists-action=w
    when: ansible_distribution != 'Ubuntu'

  - name: install the h2o artifact if we can
    shell: >
      [ -f ~/.raptiformica.d/artifacts/$(uname -m)/h2o/h2o ] &&
      (mkdir -p /usr/local/h2o/bin/ &&
      cp -f ~/.raptiformica.d/artifacts/$(uname -m)/h2o/h2o /usr/local/h2o/bin/) ||
      /bin/true

  - name: check if h2o installed
    stat: path=/usr/local/h2o/bin/h2o
    register: h2o

  - name: Install wslay repository (for h2o)
    git: repo=https://github.com/tatsuhiro-t/wslay.git
      dest=/usr/etc/wslay
      version=master
      force=yes
      update=yes
    when: h2o.stat.exists == False

  - name: Install h2o repository
    git: repo=https://github.com/h2o/h2o.git
      dest=/usr/etc/h2o
      version=master
      force=yes
      update=yes
    when: h2o.stat.exists == False

  - name: autoreconf wslay
    command: autoreconf -i
    args:
      chdir: /usr/etc/wslay
    when: h2o.stat.exists == False

  - name: automake wslay
    command: automake
    args:
      chdir: /usr/etc/wslay
    when: h2o.stat.exists == False

  - name: autoconf wslay
    command: autoconf
    args:
      chdir: /usr/etc/wslay
    when: h2o.stat.exists == False

  - name: configure wslay
    shell: ./configure
    args:
      chdir: /usr/etc/wslay
    when: h2o.stat.exists == False

  - name: make wslay
    command: make
    args:
      chdir: /usr/etc/wslay
    when: h2o.stat.exists == False

  - name: install wslay
    command: make install
    args:
      chdir: /usr/etc/wslay
    when: h2o.stat.exists == False

  - name: cmake h2o
    command: cmake -DCMAKE_INSTALL_PREFIX=/usr/local/h2o
    args:
      chdir: /usr/etc/h2o
    when: h2o.stat.exists == False

  - name: make h2o
    command: make
    args:
      chdir: /usr/etc/h2o
    when: h2o.stat.exists == False

  - name: install h2o
    shell: make install
    args:
      chdir: /usr/etc/h2o
    when: h2o.stat.exists == False

  - name: make sure there is an artifacts directory for h2o for this arch
    shell: mkdir -p ~/.raptiformica.d/artifacts/$(uname -m)/h2o/

  - name: copy compiled h2o to raptiformica artifacts for this arch
    shell: cp -f /usr/local/h2o/bin/h2o ~/.raptiformica.d/artifacts/$(uname -m)/h2o/

  - name: Ensure h2o config directory exists
    file: path=/etc/h2o state=directory

  - name: Configure h2o to reverse proxy to the load-balanced DNS entry for the service
    template:
      src=templates/h2o.conf
      dest=/etc/h2o/h2o.conf

  - name: Configure dnsmasq to use conf dir
    lineinfile:
      dest: /etc/dnsmasq.conf
      line: conf-dir=/etc/dnsmasq.d
      state: present
      create: yes

  - name: set 127.0.0.1 as first nameserver in resolv.conf
    # can't do atomic rename in Docker because /etc/resolv.conf is mounted
    # and the inode will change if we do lineinfile or sed -i, see
    # https://forums.docker.com/t/container-losing-volume-etc-hosts-when-file-is-edited/10038/3
    shell: >
      grep '127.0.0.1' /etc/resolv.conf ||
      (sed '1s/^/nameserver 127.0.0.1\n/' /etc/resolv.conf >
      /tmp/resolv.conf &&
      cat /tmp/resolv.conf > /etc/resolv.conf)

  - name: check if resolvconf head file exists on the system
    stat: path=/etc/resolvconf/resolv.conf.d/head
    register: resolv_conf_head

  - name: set 127.0.0.1 as first nameserver in resolvconf head
    lineinfile: dest=/etc/resolvconf/resolv.conf.d/head
                regexp='^nameserver 127.0.0.1'
                insertbefore=BOF
                line='nameserver 127.0.0.1'
    when: resolv_conf_head.stat.exists == True

  - name: Configure dnsmasq for consul
    lineinfile:
      dest: /etc/dnsmasq.d/10-consul
      line: server=/consul/127.0.0.1#8600
      state: present
      create: yes

  - name: Ensure consul config directory exists
    file: path=/etc/consul.d state=directory

  - name: Ensure consul service file for the webservice
    template:
      src=templates/consul_service_configuration.json
      dest=/etc/consul.d/raptiformica_map.json
    register: consul_service_registered

  - name: Reload consul agent if it is running
    shell: >
      pkill --signal SIGHUP
      -f '^/usr/bin/consul agent
      -config-dir /etc/consul.d/' ||
      /bin/true
    when: consul_service_registered.changed

  - name: Kill the service if it is running an old release
    # brackets so pkill does not terminate its own process
    shell: pkill -f [r]aptiformica_map || /bin/true

  # todo: refactor this to a supervisord script, not all hosts have an init system
  - name: Ensure the detached webservice is running
    shell: >
      screen -ls | grep -v Dead | grep -q raptiformica_map ||
      screen -S raptiformica_map -d -m
      bash -c 'PYTHONPATH=/usr/etc/raptiformica_map/
      /usr/etc/raptiformica_map/venv/bin/gunicorn
      --bind [::]:3000 raptiformica_map.web:app'

  - name: Wipe dead screens
    shell: screen -wipe || /bin/true

  # todo: refactor this to a supervisord script, not all hosts have an init system
  - name: Ensure detached dnsmasq is running
    shell: >
      screen -ls | grep -v Dead | grep -q dnsmasq ||
      screen -S dnsmasq -d -m
      /usr/sbin/dnsmasq --no-daemon

  - name: Ensure detached h2o is running
    shell: >
      screen -ls | grep -v Dead | grep -q h2o ||
      screen -S h2o -d -m
      /usr/local/h2o/bin/h2o -c /etc/h2o/h2o.conf
